#!/usr/bin/env python

import sys
# import time
from yamaha_av import YamahaAV
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GObject
# from gi.repository import Gdk
# ip = '192.168.1.130'


def boolit(state):
    return (True if state == 'On' else False)


class YamaWin(Gtk.Window):
    ip = '192.168.1.130'

    def __init__(self):

        Gtk.Window.__init__(self, title='YamAudio')
#        hbox = Gtk.Box(spacing=6)
#        vbox = Gtk.Box(spacing=6)
        self.yav = YAV(self.ip)
        self.yav.setup()
        self.recvState = self.yav.get_status_string('Power')
        self.recvPower = RecvrPower(self.yav)
#        vbox.pack_start(self.recvPower, True, True, 8)
        label = Gtk.Label.new_with_mnemonic('_Power')
        label.set_text('Power')
        grid = Gtk.Grid()
        self.set_default_size(640, 320)
        self.add(grid)
        grid.set_column_spacing(10)
        grid.attach(label, 0, 0, 1, 1)
        grid.attach(self.recvPower, 1, 0, 1, 1)

        print('---')
        print(self.recvState)
        self.recvPower.set_state(boolit(self.recvState))
#            True if self.recvState == 'On'
#                                 else False)
#       self.recvPower.set_state(self.recvState)
#        self.yav.connect('changed', self.test_callback, self.yav)
        self.yav.monitor()
        self.yav.connect('changed', self.test_callback)  # , self.recvPower)
        self.recvPower.connect('state-set', self.pwr_cb)
#        self.yav.emit('test', object())
#        self.yav.emit('noarg_signal')
        print('done')

    def test_callback(self, yav, state, *args):
        print(state)
        print('cb')
        self.recvState = state
        self.recvPower.set_state(self.recvState)
        return True

    def pwr_cb(self, win, state):
        self.yav.state = state
#            self.recvPower.emit('clicked', state)
#            self.yav.toggle_on_standby()
        print(str(state) + ' is the pwr state')
        return True


class RecvrPower(Gtk.Switch):
    _state = None

    def __init__(self, yav):
        Gtk.Switch.__init__(self)
        Gtk.Switch.new()

#        self.add(self.grid)
        self.yav = yav
#        i = Gtk.Label()
#        print(dir(i.props))

#        [print(m) for m in dir(self) if 'abel' in m]
        self.connect('state-set', self.on_clicked)

    def on_clicked(self, widget, state):
        print('on click, state is ' + str(state))
        if state is True:
            self.yav.power_on()
        elif state is False:
            self.yav.power_standby()
        print('just toggle button')
        return False


class YAV(YamahaAV, GObject.GObject):
    def __init__(self, ip):
        YamahaAV.__init__(self, ip)
        GObject.GObject.__init__(self)
        self.state = self.get_status_string('Power')
        self.prev_state = self.state

    def monitor(self):
        GObject.timeout_add_seconds(3, self.checkit)

    def checkit(self):
        self.state = boolit(self.get_status_string('Power'))
        print('in checkit')
        if self.state != self.prev_state:
            print('wwo')
            self.emit('changed', self.state)
        return True

    @GObject.Signal(name='changed',
                    flags=GObject.SignalFlags.RUN_LAST,
                    return_type=bool,
                    arg_types=(bool,),
                    accumulator=GObject.signal_accumulator_true_handled)
    def changed(self, state, *args):
        print(str(state) + ' hello!')
        return False

    @GObject.Signal
    def noarg_signal(self, state):
        self.recvState = self.state
        print('state is now:    ', state)
        print('noarg_signal')


def main():
    win = YamaWin()
    win.connect('destroy', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    sys.exit(main())
